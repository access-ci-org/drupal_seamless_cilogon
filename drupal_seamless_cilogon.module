<?php

/**
 * Module for seamless login.
 *
 * ACCESS sites would share logged in status via a session cookie that has access permissions 
 * for any subdomain under http://access-ci.org . This cookie would be set by any site upon 
 * successful login and could be cleared by any site on logout. Any ACCESS site would 
 * automatically begin the CiLogon process on first page load if this cookie is set. 
 * 
 * Document describing option selected by the IAM working group, option 3.2.3:
 *    https://drive.google.com/file/d/1lmzJ4gOQaeYg-RBl50pnl8BZGiJr7Fs9/view
 * 
 * This should be a new ACCESS module named drupal_seamless_cilogon in the 
 * repository https://github.com/access-ci-org/drupal_seamless_cilogon
 * 
 */


use Drupal\Component\Utility\Html;
use Drupal\drupal_seamless_cilogon\EventSubscriber\DrupalSeamlessCilogonEventSubscriber;

/**
 * Implements hook_user_login().  If on a verified domain, set the "is-logged-in" cookie
 * with an 18 hour expiration.  Include the site name (for debugging purposes).  If 
 * on the access-ci.org domain, include that in the cookie as well.
 */
function drupal_seamless_cilogon_user_login($args)
{

  $seamless_debug = \Drupal::state()->get('drupal_seamless_cilogon.seamless_cookie_debug', true);

  $domain_verified = verify_domain();
  
  if ($seamless_debug) {
    $msg =  __FUNCTION__ . "() - domain_verified = " . print_r($domain_verified, true) 
      . ' -- ' . basename(__FILE__) . ':' . __LINE__ ;  
    \Drupal::messenger()->addStatus($msg);
    \Drupal::logger('seamless_cilogon')->debug($msg);
  }

  // only start this flow if we the domain is verified
  if (!$domain_verified) {
    return;
  }

  $site_name = \Drupal::config('system.site')->get('name');

  $cookie_name = \Drupal::state()->get(
    'drupal_seamless_cilogon.seamless_cookie_name',
    DrupalSeamlessCilogonEventSubscriber::seamlessCookieName
  );

  $cookie_value = \Drupal::state()->get('drupal_seamless_cilogon.seamless_cookie_value', null);
  if (strlen($cookie_value) == 0) {
    $cookie_value =  "INITIAL_DOMAIN=$site_name";
  }

  $cookie_expiration = \Drupal::state()->get('drupal_seamless_cilogon.seamless_cookie_expiration', null);
  $cookie_expiration = strlen($cookie_expiration) == 0
    ? strtotime('+18 hours')  // default to +18 hours
    : strtotime($cookie_expiration);  // use value from form
  
  // Set the cookie domain (unless debugging)
  $cookie_domain = $seamless_debug ? null : 'access-ci.org';

  // set the cookie. 
  setcookie(
    $cookie_name,
    $cookie_value,
    $cookie_expiration,
    '/', // path
    $cookie_domain, // domain
  );

  if ($seamless_debug) {
    $msg =  __FUNCTION__ . "() - set cookie, name = $cookie_name, value = $cookie_value, expiration = $cookie_expiration "
      . " = " . date("Y-m-d H:i:s", $cookie_expiration) . ", domain = $cookie_domain"
      . ' -- ' . basename(__FILE__) . ':' . __LINE__ ;  
    \Drupal::messenger()->addStatus($msg);
    \Drupal::logger('seamless_cilogon')->debug($msg);
  }
}

/**
 * Implements hook_user_logout().  When logging out from ACCESS Support, remove the cookie and 
 * redirect to https://cilogon.org/logout/.
 */
function drupal_seamless_cilogon_user_logout($account)
{
  if (!verify_domain()) {
    return;
  }
  
  $cookie_name = \Drupal::state()->get(
    'drupal_seamless_cilogon.seamless_cookie_name',
    DrupalSeamlessCilogonEventSubscriber::seamlessCookieName
  );

  // Set cookie in the past and then remove it.
  setcookie(
    $cookie_name,
    '',
    strtotime('-1 hour'),
    '/'
  );
  unset($_COOKIE[$cookie_name]);


  $seamless_debug = \Drupal::state()->get('drupal_seamless_cilogon.seamless_cookie_debug', true);
  if ($seamless_debug) {
    $msg =  __FUNCTION__ . "() - unset cookie, name = $cookie_name"
      . ' -- ' . basename(__FILE__) . ':' . __LINE__ ;  
    \Drupal::messenger()->addStatus($msg);
    \Drupal::logger('seamless_cilogon')->debug($msg);
  }
}


/**
 * The ACCESS support portal uses the domain access module.  If this module
 * is in use, we only want to set cookies for the 'access-support' 
 * module.  
 * 
 * This function checks if the domain access module is in use, and 
 * if so, returns FALSE if the current domain name is not 'access-support'.
 * 
 * Otherwise it returns true.
 * 
 * @return bool whether to proceed with the cookie logic in invoking code
 * 
 */
function verify_domain()
{
  // Verify the domain module is installed.  If not installed, 
  // return true to proceed to CILogon.
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('domain')) {
    return true;
  }

  $token = \Drupal::token();
  $domainName = t("[domain:name]");
  $current_domain_name = Html::getClass($token->replace($domainName));

  $seamless_debug = \Drupal::state()->get('drupal_seamless_cilogon.seamless_cookie_debug', true);
  if ($seamless_debug) {
    $msg = basename(__FILE__) . ':' . __LINE__ . ' -- '
      . 'in verify_domain(), current_domain_name = [' . $current_domain_name . ']';
    \Drupal::logger('seamless_cilogon')->debug($msg);
    \Drupal::messenger()->addStatus($msg);
  }

  // return true if the current domain is 'access-support'
  return $current_domain_name === 'access-support';
}
