<?php

/**
 * Module for seamless login.
 *
 * ACCESS sites would share logged in status via a session cookie that has access permissions
 * for any subdomain under http://access-ci.org . This cookie would be set by any site upon
 * successful login and could be cleared by any site on logout. Any ACCESS site would
 * automatically begin the CiLogon process on first page load if this cookie is set.
 *
 * Document describing option selected by the IAM working group, option 3.2.3:
 *    https://drive.google.com/file/d/1lmzJ4gOQaeYg-RBl50pnl8BZGiJr7Fs9/view
 *
 * This should be a new ACCESS module named drupal_seamless_cilogon in the
 * repository https://github.com/access-ci-org/drupal_seamless_cilogon
 * 
 * The functionality for login is in the DrupalSeamlessCilogonEventSubscriber.
 *
 */

use Drupal\Component\Utility\Html;
use Drupal\drupal_seamless_cilogon\EventSubscriber\DrupalSeamlessCilogonEventSubscriber;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_user_logout().  When logging out from ACCESS Support, remove the cookie and
 * redirect to https://cilogon.org/logout/.
 */
function drupal_seamless_cilogon_user_logout($account)
{
  $domain_verified = verify_domain_is_asp();

  $seamless_debug = \Drupal::state()->get('drupal_seamless_cilogon.seamless_cookie_debug', false);
  if ($seamless_debug) {
    $msg =  __FUNCTION__ . "() - domain_verified = " . ($domain_verified ? "true" : "false")
      . ' -- ' . basename(__FILE__) . ':' . __LINE__ ;
    \Drupal::messenger()->addStatus($msg);
    \Drupal::logger('seamless_cilogon')->debug($msg);
    error_log('seamless: ' . $msg);
  }

  // only start this flow if we the domain is verified
  if (!$domain_verified) {
    return;
  }

  $cookie_name = DrupalSeamlessCilogonEventSubscriber::SEAMLESSCOOKIENAME;
  $cookie_value = '';
  $cookie_expiration = strtotime('-1 hour'); 
  $cookie_domain = '';

  // Set cookie in the past and then remove it.
  setcookie($cookie_name, $cookie_value, $cookie_expiration, '/', $cookie_domain);
  unset($_COOKIE[$cookie_name]);

  if ($seamless_debug) {
    $msg =  __FUNCTION__ . "() - unset cookie with name = $cookie_name - redirecting to cilogon.org/logout"
      . ' -- ' . basename(__FILE__) . ':' . __LINE__ ;
    \Drupal::messenger()->addStatus($msg);
    \Drupal::logger('seamless_cilogon')->debug($msg);
    error_log('seamless: ' . $msg);
  }

  $redirect = new RedirectResponse("https://cilogon.org/logout/?skin=access");
  $redirect->send();
}


/**
 * The ACCESS support portal uses the domain access module.  If this module
 * is in use, we only want to set cookies for the 'access-support'
 * module.
 *
 * This function checks if the domain access module is in use, and
 * if so, returns FALSE if the current domain name is not 'access-support'.
 *
 * Otherwise it returns true.
 *
 * @return bool whether to proceed with the cookie logic in invoking code
 *
 */
function verify_domain_is_asp()
{
  // Verify the domain module is installed.  If not installed,
  // return true to proceed to CILogon.
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('domain')) {
    return true;
  }

  $token = \Drupal::token();
  $domainName = t("[domain:name]");
  $current_domain_name = Html::getClass($token->replace($domainName));

  $domain_verified = $current_domain_name === 'access-support';

  $seamless_debug = \Drupal::state()->get('drupal_seamless_cilogon.seamless_cookie_debug', false);
  if ($seamless_debug) {
    $msg = basename(__FILE__) . ':' . __LINE__ . ' -- '
      . 'current_domain_name = [' . $current_domain_name . '] so verify_domain() returns ' 
      . ($domain_verified ? 'TRUE' : 'FALSE');
    \Drupal::logger('seamless_cilogon')->debug($msg);
    \Drupal::messenger()->addStatus($msg);
  }

  // return true if the current domain is 'access-support'
  return $domain_verified;
}
